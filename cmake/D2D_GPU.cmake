# GPU CMakeLists
if (ENABLE_OPENACC)
  include(FindOpenACC)
  if(OpenACC_Fortran_FOUND)
    message(STATUS "OpenACC for Fotran Compiler Found, version ${OpenACC_Fortran_VERSION_MAJOR}.${OpenACC_Fortran_VERSION_MINOR}")
  else()
    message(ERROR_CRITICAL "No OpenACC support detected")
  endif()
endif()

if (ENABLE_CUDA)
  find_package(CUDAToolkit REQUIRED)
  if (NOT SET_CUDA_ARCH)
    message(STATUS "**SET_CUDA_ARCH**")
    set(SET_CUDA_ARCH 1 CACHE INTERNAL "Set CUDA Architecture" FORCE)
    set(CUDA_ARCH_TEST 70 )
    include(FindCUDA/select_compute_arch)
    CUDA_DETECT_INSTALLED_GPUS(INSTALLED_GPU_CCS_1)
    string(STRIP "${INSTALLED_GPU_CCS_1}" INSTALLED_GPU_CCS_2)
    string(REPLACE " " ";" INSTALLED_GPU_CCS_3 "${INSTALLED_GPU_CCS_2}")
    string(REPLACE "." "" CUDA_ARCH_LIST "${INSTALLED_GPU_CCS_3}")
    SET(CMAKE_CUDA_ARCHITECTURES ${CUDA_ARCH_LIST})
    set_property(GLOBAL PROPERTY CUDA_ARCHITECTURES "${CUDA_ARCH_LIST}")
    list(GET CUDA_ARCH_LIST 0 CUDA_ARCH_AUTO)
    list(LENGTH CUDA_ARCH_LIST GPU_NUMBER)
    if(${CUDA_ARCH_AUTO} GREATER ${CUDA_ARCH_TEST})
      set(CUDA_ARCH_COMP ${CUDA_ARCH_AUTO} CACHE STRING "Set CUDA Computing Architecture")
    else()
      set(CUDA_ARCH_COMP ${CUDA_ARCH_TEST} CACHE STRING "Set CUDA Computing Architecture")
    endif()
    set(CMAKE_CUDA_ARCHITECTURES ${CUDA_ARCH_COMP} CACHE STRING "Set the correct CUDA architecture" FORCE)
  else()
    set(CUDA_ARCH_COMP ${SET_CUDA_ARCH})
  endif()
endif()

