file(GLOB files_fft_multiple_grids_no_obj fft_multiple_grids_no_obj.f90 fft_multiple_grids_utilities.f90 fft_multiple_grids_reference.f90)
file(GLOB files_fft_multiple_grids fft_multiple_grids.f90 fft_multiple_grids_utilities.f90 fft_multiple_grids_reference.f90)
if (FFT_Choice MATCHES "fftw_f03")
  file(GLOB files_fft_multiple_grids_inplace fft_multiple_grids_inplace.f90 fft_multiple_grids_utilities.f90 fft_multiple_grids_reference.f90)
endif()

include_directories(${CMAKE_SOURCE_DIR}/src)

add_executable(fft_multiple_grids_no_obj ${files_fft_multiple_grids_no_obj})
add_executable(fft_multiple_grids ${files_fft_multiple_grids})
if (FFT_Choice MATCHES "fftw_f03")
  add_executable(fft_multiple_grids_inplace ${files_fft_multiple_grids_inplace})
endif()
# Fix race condition
# Fatal Error: Cannot delete temporary module file ‘../../include/reference_data.mod0’: No such file or directory
add_dependencies(fft_multiple_grids fft_multiple_grids_no_obj)
if (FFT_Choice MATCHES "fftw_f03")
  add_dependencies(fft_multiple_grids_inplace fft_multiple_grids)
endif()


target_link_libraries(fft_multiple_grids_no_obj PRIVATE decomp2d examples_utils)
target_link_libraries(fft_multiple_grids PRIVATE decomp2d examples_utils)
if (FFT_Choice MATCHES "fftw_f03")
  target_link_libraries(fft_multiple_grids_inplace PRIVATE decomp2d examples_utils)
endif()

# Run the test(s)
set(run_dir "${test_dir}/fft_multiple_grids_no_obj")
message(STATUS "Example dir ${run_dir}")
file(MAKE_DIRECTORY ${run_dir})
if (BUILD_TARGET MATCHES "gpu")
  file(COPY bind.sh DESTINATION ${run_dir})
  add_test(NAME fft_multiple_grids_no_obj COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} ${MPIEXEC_MAX_NUMPROCS} ./bind.sh  $<TARGET_FILE:fft_multiple_grids_no_obj> ${TEST_ARGUMENTS} WORKING_DIRECTORY ${run_dir})
else ()  
  add_test(NAME fft_multiple_grids_no_obj COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} ${MPIEXEC_MAX_NUMPROCS} $<TARGET_FILE:fft_multiple_grids_no_obj> ${TEST_ARGUMENTS} WORKING_DIRECTORY ${run_dir})
endif()

set(run_dir "${test_dir}/fft_multiple_grids")
message(STATUS "Example dir ${run_dir}")
file(MAKE_DIRECTORY ${run_dir})
if (BUILD_TARGET MATCHES "gpu")
  file(COPY bind.sh DESTINATION ${run_dir})
  add_test(NAME fft_multiple_grids COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} ${MPIEXEC_MAX_NUMPROCS} ./bind.sh  $<TARGET_FILE:fft_multiple_grids> ${TEST_ARGUMENTS} WORKING_DIRECTORY ${run_dir})
else ()  
  add_test(NAME fft_multiple_grids COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} ${MPIEXEC_MAX_NUMPROCS} $<TARGET_FILE:fft_multiple_grids> ${TEST_ARGUMENTS} WORKING_DIRECTORY ${run_dir})
endif()

if (FFT_Choice MATCHES "fftw_f03")
  set(run_dir "${test_dir}/fft_multiple_grids_inplace")
  message(STATUS "Example dir ${run_dir}")
  file(MAKE_DIRECTORY ${run_dir})
  if (BUILD_TARGET MATCHES "gpu")
    file(COPY bind.sh DESTINATION ${run_dir})
    add_test(NAME fft_multiple_grids_inplace COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} ${MPIEXEC_MAX_NUMPROCS} ./bind.sh  $<TARGET_FILE:fft_multiple_grids_inplace> ${TEST_ARGUMENTS} WORKING_DIRECTORY ${run_dir})
  else ()  
    add_test(NAME fft_multiple_grids_inplace COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} ${MPIEXEC_MAX_NUMPROCS} $<TARGET_FILE:fft_multiple_grids_inplace> ${TEST_ARGUMENTS} WORKING_DIRECTORY ${run_dir})
  endif()
endif()
